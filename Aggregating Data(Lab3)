 1.Create the tables in the schema, including all of their columns, datatypes, and constraints, and populate the tables with data.
 
 CREATE TABLE Resort_type (
resort_type_id DECIMAL(12) NOT NULL PRIMARY KEY, resort_type VARCHAR(64) NOT NULL);
CREATE TABLE Resort (
resort_id DECIMAL(12) NOT NULL PRIMARY KEY,
resort_type_id DECIMAL(12) NOT NULL,
name VARCHAR(255) NOT NULL,
FOREIGN KEY (resort_type_id) REFERENCES Resort_type(resort_type_id));
CREATE TABLE Accommodations (
accommodations_id DECIMAL(12) NOT NULL PRIMARY KEY, resort_id DECIMAL(12) NOT NULL,
description VARCHAR(255) NOT NULL,
cost_per_night DECIMAL(8,2) NULL,
FOREIGN KEY (resort_id) REFERENCES Resort(resort_id));

 
Code: Inserting Resort Data
--Resort types.
INSERT INTO Resort_type(resort_type_id, resort_type) VALUES(1, 'Ocean');
INSERT INTO Resort_type(resort_type_id, resort_type) VALUES(2, 'Lakeside');
INSERT INTO Resort_type(resort_type_id, resort_type) VALUES(3, 'Mountaintop');
INSERT INTO Resort_type(resort_type_id, resort_type) VALUES(4, 'Country');
--Resorts.
INSERT INTO Resort(resort_id, name, resort_type_id)
VALUES(101, 'Light of the Ocean', 1); --Ocean resort type INSERT INTO Resort(resort_id, name, resort_type_id)
VALUES(102, 'Breathtaking Bahamas', 1); --Ocean resort type INSERT INTO Resort(resort_id, name, resort_type_id)
VALUES(103, 'Mountainous Mexico', 3); --Mountaintop resort type INSERT INTO Resort(resort_id, name, resort_type_id)
VALUES(104, 'Greater Lakes', 2); --Lakeside resort type
--Accommodations
INSERT INTO Accommodations(accommodations_id, description, cost_per_night, resort_id) VALUES(1001, 'Bungalow 1', 289, 101); --Accommodation for Light of the Ocean resort. INSERT INTO Accommodations(accommodations_id, description, cost_per_night, resort_id) VALUES(1002, 'Bungalow 2', 289, 101); --Accommodation for Light of the Ocean resort. INSERT INTO Accommodations(accommodations_id, description, cost_per_night, resort_id) VALUES(1003, 'Bungalow 3', 325, 101); --Accommodation for Light of the Ocean resort. INSERT INTO Accommodations(accommodations_id, description, cost_per_night, resort_id) VALUES(1004, 'Suite 101', 199, 102); --Accommodation for Breathtaking Bahamas.
INSERT INTO Accommodations(accommodations_id, description, cost_per_night, resort_id) VALUES(1005, 'Suite 102', 199, 102); --Accommodation for Breathtaking Bahamas.
INSERT INTO Accommodations(accommodations_id, description, cost_per_night, resort_id) VALUES(1006, 'Suite 201', 250, 102); --Accommodation for Breathtaking Bahamas.
INSERT INTO Accommodations(accommodations_id, description, cost_per_night, resort_id) VALUES(1007, 'Suite 202', 250, 102); --Accommodation for Breathtaking Bahamas.
INSERT INTO Accommodations(accommodations_id, description, cost_per_night, resort_id) VALUES(1008, 'Room 10', 150, 103); --Accommodation for Mountainous Mexico.
INSERT INTO Accommodations(accommodations_id, description, cost_per_night, resort_id) VALUES(1009, 'Room 20', null, 103); --Accommodation for Mountainous Mexico.
INSERT INTO Accommodations(accommodations_id, description, cost_per_night, resort_id) VALUES(1010, 'Cabin A', 300, 104); --Accommodation for Greater Lakes.
INSERT INTO Accommodations(accommodations_id, description, cost_per_night, resort_id) VALUES(1011, 'Cabin B', null, 104); --Accommodation for Greater Lakes.
INSERT INTO Accommodations(accommodations_id, description, cost_per_night, resort_id) VALUES(1012, 'Cabin C', 350, 104); --Accommodation for Greater Lakes.

2.A video reseller needs to know how many movies are available. Write a single query to fulfill this request.
 
Code: Counting Accommodations
--Count the number of accommodations in the table. SELECT COUNT(*) AS nr_accommodations
FROM Accommodations;

Code: Counting cost_per_night
--Count the number of non-null costs in the table. SELECT COUNT(cost_per_night) AS nr_accommodations FROM Accommodations;

Code: Distinct Counting
--Count the number of non-distinct and distinct foreign key references. SELECT COUNT(resort_id) AS nr_non_distinct,
COUNT(DISTINCT resort_id) AS nr_distinct FROM Accommodations;

3. The same video reseller needs to know the price of the most expensive and least expensive series. Write two queries that fulfill this request, and also explain how and why the SQL processor treated the suggested price for the Lord of the Rings series differently than the other suggested price values.
 
Code: Obtaining the Smallest Price
--Obtain the least expensive price.
SELECT MIN(cost_per_night) AS least_expensive FROM Accommodations;

4. A film production company is considering purchasing the rights to extend a series, and needs to know the names and prices of all movie series, along with the number of movies in each series. Write a single query to fulfill this request.
 
Code: Obtaining the Smallest Price (No Group)
--Obtain the least expensive price.
SELECT MIN(cost_per_night) AS least_expensive FROM Accommodations;
 
Code: Obtaining the Smallest Price Per Resort
--Obtain the least expensive price per resort.
SELECT resort_id, MIN(cost_per_night) AS least_expensive FROM Accommodations
GROUP BY resort_id;
 
Code: Obtaining Least Expensive Accommodation with Name
--Obtain the least expensive price per resort, with resort name. SELECT name, MIN(cost_per_night) AS least_expensive
FROM Accommodations
JOIN Resort ON Resort.resort_id = Accommodations.resort_id GROUP BY Resort.resort_id, name;

5. The same film production company wants to limit its search to genres that have at least 7 associated movies. Write a single query to fulfill this request, making sure to list only genres that have at least 7 associated movies, along with the number of movies for the genre.
 
Code: Cheapest Price Per Resort Less Than $225
--Obtain the least expensive price per resort, less then $225. SELECT name, MIN(cost_per_night) AS least_expensive
FROM Accommodations
JOIN Resort ON Resort.resort_id = Accommodations.resort_id GROUP BY Resort.resort_id, name
HAVING MIN(cost_per_night) < 225;

6. Boston University wants to offer its students a movie‐binge weekend by playing every movie in a series. To make sure the series is as bingeable as possible, BU wants to be sure the series will run for at least 10 hours. Write a single query that gives this information, with useful columns.
 
Code: Resorts Bringing at Least $800 Revenue Per Night
--Show resorts that bring in at least $800 revenue per night. SELECT name, SUM(cost_per_night) AS total_revenue
FROM Accommodations
JOIN Resort ON Resort.resort_id = Accommodations.resort_id GROUP BY Resort.resort_id, Resort.name
HAVING SUM(cost_per_night) >= 800;

7. A research institution requests the names of all movie series’ creators, as well as the number of “Family Film” movies they have created (even if they created none). The institution wants the list to be ordered from most to least; the creator who created the most family films will be at the top of the list, and the one with the least will be at the bottom. Write a single query that gives this information, with useful columns.
 
  
Code: Intermediate Result with no Aggregation
--Show all SELECT FROM
JOIN
RIGHT JOIN
accommodations along with their resorts and types, that cost more than $200. *
Resort
Accommodations ON Accommodations.resort_id = Resort.resort_id
AND Accommodations.cost_per_night >= 200 Resort_type ON Resort_type.resort_type_id = Resort.resort_type_id;
 
Code: All Resort Types along with Number Over 200
--Show all SELECT FROM
JOIN
RIGHT JOIN
GROUP BY
ORDER BY
resort types and the number of accommodations costing over $200, ordered least to greatest. Resort_type.resort_type, COUNT(Accommodations.accommodations_id) AS nr_over_200
Resort
Accommodations ON Accommodations.resort_id = Resort.resort_id
AND Accommodations.cost_per_night >= 200 Resort_type ON Resort_type.resort_type_id = Resort.resort_type_id Resort_type.resort_type_id, Resort_type.resort_type
nr_over_200;
