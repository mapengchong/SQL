To perform the PROJECTlast_name(Person) operation in SQL, we specify the last_name column in the command ‐‐ SELECT last_name FROM Person -- and the database returns for us the values in the last_name column.
Now if we would like to perform the equivalent of the SELECTlast_name=Smith(PROJECTlast_name(Person)) operation in our database. We can do so through the use of a subquery, illustrated in the command below.

SELECT * FROM (SELECT last_name from Person) WHERE last_name = 'Glass'

1. Create the tables in the schema, including all of their columns, datatypes, and constraints, and populate the tables with data. You can do so by executing the DDL and DML above in your SQL client. 

The DDL and DML we use to create and populate the tables in our example schema is listed below.
DROP TABLE Sells;
DROP TABLE Offers;
DROP TABLE Available_in;
DROP TABLE Store_location;
DROP TABLE Product;
DROP TABLE Currency;
DROP TABLE Purchase_delivery_offering;
DROP TABLE Sizes;
CREATE TABLE Currency (
currency_id DECIMAL(12) NOT NULL PRIMARY KEY, currency_name VARCHAR(255) NOT NULL, us_dollars_to_currency_ratio DECIMAL(12,2) NOT NULL);
CREATE TABLE Store_location (
store_location_id DECIMAL(12) NOT NULL PRIMARY KEY, store_name VARCHAR(255) NOT NULL, currency_accepted_id DECIMAL(12) NOT NULL);
CREATE TABLE Product (
product_id DECIMAL(12) NOT NULL PRIMARY KEY,
product_name VARCHAR(255) NOT NULL,
price_in_us_dollars DECIMAL(12,2) NOT NULL);
CREATE TABLE Sells (
sells_id DECIMAL(12) NOT NULL PRIMARY KEY,
product_id DECIMAL(12) NOT NULL,
store_location_id DECIMAL(12) NOT NULL);
CREATE TABLE Purchase_delivery_offering ( purchase_delivery_offering_id DECIMAL(12) NOT NULL PRIMARY KEY, offering VARCHAR(255) NOT NULL);
CREATE TABLE Offers (
offers_id DECIMAL(12) NOT NULL PRIMARY KEY, store_location_id DECIMAL(12) NOT NULL, purchase_delivery_offering_id DECIMAL(12) NOT NULL);
CREATE TABLE Sizes (
sizes_id DECIMAL(12) NOT NULL PRIMARY KEY,
size_option VARCHAR(255) NOT NULL);
CREATE TABLE Available_in (
available_in_id DECIMAL(12) NOT NULL PRIMARY KEY, product_id DECIMAL(12) NOT NULL,
sizes_id DECIMAL(12) NOT NULL);

ALTER TABLE Store_location
ADD CONSTRAINT fk_location_to_currency FOREIGN KEY(currency_accepted_id) REFERENCES Currency(currency_id);
ALTER TABLE Sells
ADD CONSTRAINT fk_sells_to_product FOREIGN KEY(product_id) REFERENCES Product(product_id);
ALTER TABLE Sells
ADD CONSTRAINT fk_sells_to_location FOREIGN KEY(store_location_id) REFERENCES Store_location(store_location_id);
ALTER TABLE Offers
ADD CONSTRAINT fk_offers_to_location FOREIGN KEY(store_location_id) REFERENCES Store_location(store_location_id);
ALTER TABLE Offers
ADD CONSTRAINT fk_offers_to_offering FOREIGN KEY(purchase_delivery_offering_id) REFERENCES Purchase_delivery_offering(purchase_delivery_offering_id);
ALTER TABLE Available_in
ADD CONSTRAINT fk_available_to_product FOREIGN KEY(product_id) REFERENCES Product(product_id);
ALTER TABLE Available_in
ADD CONSTRAINT fk_available_to_sizes FOREIGN KEY(sizes_id) REFERENCES Sizes(sizes_id);
INSERT INTO Currency(currency_id, currency_name, us_dollars_to_currency_ratio) VALUES(1, 'Britsh Pound', 0.66);
INSERT INTO Currency(currency_id, currency_name, us_dollars_to_currency_ratio) VALUES(2, 'Canadian Dollar', 1.33);
INSERT INTO Currency(currency_id, VALUES(3, 'US Dollar', 1.00); INSERT INTO Currency(currency_id, VALUES(4, 'Euro', 0.93);
INSERT INTO Currency(currency_id, VALUES(5, 'Mexican Peso', 16.75);
currency_name, us_dollars_to_currency_ratio)
currency_name, us_dollars_to_currency_ratio)
currency_name, us_dollars_to_currency_ratio)
INSERT INTO Purchase_delivery_offering(purchase_delivery_offering_id, offering) VALUES (50, 'Purchase In Store');
INSERT INTO Purchase_delivery_offering(purchase_delivery_offering_id, offering) VALUES (51, 'Purchase Online, Ship to Home');
INSERT INTO Purchase_delivery_offering(purchase_delivery_offering_id, offering) VALUES (52, 'Purchase Online, Pickup in Store');
INSERT INTO Sizes(sizes_id, size_option) VALUES(1, 'Small');
INSERT INTO Sizes(sizes_id, size_option) VALUES(2, 'Medium');
INSERT INTO Sizes(sizes_id, size_option) VALUES(3, 'Large');
INSERT INTO Sizes(sizes_id, size_option) VALUES(4, 'Various');
INSERT INTO Sizes(sizes_id, size_option) VALUES(5, '2');
INSERT INTO Sizes(sizes_id, size_option) VALUES(6, '4');
INSERT INTO Sizes(sizes_id, size_option) VALUES(7, '6');
INSERT INTO Sizes(sizes_id, size_option) VALUES(8, '8');
INSERT INTO Sizes(sizes_id, size_option) VALUES(9, '10');
INSERT INTO Sizes(sizes_id, size_option) VALUES(10, '12');
INSERT INTO Sizes(sizes_id, size_option)
VALUES(11, '14');
INSERT INTO Sizes(sizes_id, size_option) VALUES(12, '16');
‐‐Cashmere Sweater
INSERT INTO Product(product_id, product_name, price_in_us_dollars) VALUES(100, 'Cashmere Sweater', 100);
INSERT INTO Available_in(available_in_id, product_id, sizes_id) VALUES(10000, 100, 1);
INSERT INTO Available_in(available_in_id, product_id, sizes_id) VALUES(10001, 100, 2);
INSERT INTO Available_in(available_in_id, product_id, sizes_id) VALUES(10002, 100, 3);
‐‐Designer Jeans
INSERT INTO Product(product_id, product_name, price_in_us_dollars) VALUES(101, 'Designer Jeans', 150);
INSERT INTO Available_in(available_in_id, product_id, sizes_id) VALUES(10003, 101, 4);
‐‐Flowing Skirt
INSERT INTO Product(product_id, product_name, price_in_us_dollars) VALUES(102, 'Flowing Skirt', 125);
INSERT INTO Available_in(available_in_id, product_id, sizes_id) VALUES(10004, 102, 5);
INSERT INTO Available_in(available_in_id, product_id, sizes_id) VALUES(10005, 102, 6);
INSERT INTO Available_in(available_in_id, product_id, sizes_id) VALUES(10006, 102, 7);
INSERT INTO Available_in(available_in_id, product_id, sizes_id) VALUES(10007, 102, 8);
INSERT INTO Available_in(available_in_id, product_id, sizes_id) VALUES(10008, 102, 9);
INSERT INTO Available_in(available_in_id, product_id, sizes_id) VALUES(10009, 102, 10);
INSERT INTO Available_in(available_in_id, product_id, sizes_id) VALUES(10010, 102, 11);
INSERT INTO Available_in(available_in_id, product_id, sizes_id) VALUES(10011, 102, 12);
‐‐Silk Blouse
INSERT INTO Product(product_id, product_name, price_in_us_dollars) VALUES(103, 'Silk Blouse', 200);
INSERT INTO Available_in(available_in_id, product_id, sizes_id) VALUES(10012, 103, 1);
INSERT INTO Available_in(available_in_id, product_id, sizes_id) VALUES(10013, 103, 2);
INSERT INTO Available_in(available_in_id, product_id, sizes_id) VALUES(10014, 103, 3);
‐‐Wool Overcoat
INSERT INTO Product(product_id, product_name, price_in_us_dollars) VALUES(104, 'Wool Overcoat', 250);
INSERT INTO Available_in(available_in_id, product_id, sizes_id) VALUES(10015, 104, 1);
INSERT INTO Available_in(available_in_id, product_id, sizes_id) VALUES(10016, 104, 2);
INSERT INTO Available_in(available_in_id, product_id, sizes_id) VALUES(10017, 104, 3);
‐‐Berlin Extension
INSERT INTO Store_location(store_location_id, store_name, currency_accepted_id) VALUES(10, 'Berlin Extension', 4);
INSERT INTO Sells(sells_id, store_location_id, product_id)
VALUES(1000, 10, 100);
INSERT INTO Sells(sells_id, store_location_id, product_id)
VALUES(1001, 10, 101);
INSERT INTO Sells(sells_id, store_location_id, product_id)
VALUES(1002, 10, 103);
INSERT INTO Sells(sells_id, store_location_id, product_id)
VALUES(1003, 10, 104);
INSERT INTO Offers(offers_id, store_location_id, purchase_delivery_offering_id) VALUES(150, 10, 50);
‐‐Cancun Extension
INSERT INTO Store_location(store_location_id, store_name, currency_accepted_id) VALUES(11, 'Cancun Extension', 5);
INSERT INTO Sells(sells_id, store_location_id, product_id)
VALUES(1004, 11, 101);
INSERT INTO Sells(sells_id, store_location_id, product_id)
VALUES(1005, 11, 102);
INSERT INTO Sells(sells_id, store_location_id, product_id)
VALUES(1006, 11, 103);
INSERT INTO Offers(offers_id, store_location_id, purchase_delivery_offering_id) VALUES(151, 11, 50);
‐‐London Extension
INSERT INTO Store_location(store_location_id, store_name, currency_accepted_id) VALUES(12, 'London Extension', 1);
INSERT INTO Sells(sells_id, store_location_id, product_id)
VALUES(1007, 12, 100);
INSERT INTO Sells(sells_id, store_location_id, product_id)
VALUES(1008, 12, 101);
INSERT INTO Sells(sells_id, store_location_id, product_id)
VALUES(1009, 12, 102);
INSERT INTO Sells(sells_id, store_location_id, product_id)
VALUES(1010, 12, 103);
INSERT INTO Sells(sells_id, store_location_id, product_id)
VALUES(1011, 12, 104);
INSERT INTO Offers(offers_id, store_location_id, purchase_delivery_offering_id) VALUES(152, 12, 50);
INSERT INTO Offers(offers_id, store_location_id, purchase_delivery_offering_id) VALUES(153, 12, 51);
INSERT INTO Offers(offers_id, store_location_id, purchase_delivery_offering_id) VALUES(154, 12, 52);
‐‐New York Extension
INSERT INTO Store_location(store_location_id, store_name, currency_accepted_id) VALUES(13, 'New York Extension', 3);
INSERT INTO Sells(sells_id, store_location_id, product_id)
VALUES(1012, 13, 100);
INSERT INTO Sells(sells_id, store_location_id, product_id)
VALUES(1013, 13, 101);
INSERT INTO Sells(sells_id, store_location_id, product_id)
VALUES(1014, 13, 102);
INSERT INTO Sells(sells_id, store_location_id, product_id)
VALUES(1015, 13, 103);
INSERT INTO Sells(sells_id, store_location_id, product_id)
VALUES(1016, 13, 104);
INSERT INTO Offers(offers_id, store_location_id, purchase_delivery_offering_id) VALUES(155, 13, 50);
INSERT INTO Offers(offers_id, store_location_id, purchase_delivery_offering_id) VALUES(156, 13, 52);
‐‐Toronto Extension
INSERT INTO Store_location(store_location_id, store_name, currency_accepted_id) VALUES(14, 'Toronto Extension', 2);
INSERT INTO Sells(sells_id, store_location_id, product_id)
VALUES(1017, 14, 100);
INSERT INTO Sells(sells_id, store_location_id, product_id)
VALUES(1018, 14, 101);
INSERT INTO Sells(sells_id, store_location_id, product_id)
VALUES(1019, 14, 102);
INSERT INTO Sells(sells_id, store_location_id, product_id)
VALUES(1020, 14, 103);
INSERT INTO Sells(sells_id, store_location_id, product_id)
VALUES(1021, 14, 104);
INSERT INTO Offers(offers_id, store_location_id, purchase_delivery_offering_id)
VALUES(157, 14, 50);ent.

2. Write two queries which together retrieve the price of a digital thermometer in London. The first query will retrieve the currency ratio for the currency accepted in London. Your second query will hardcode the currency ratio retrieved in the first query, in order to determine the price of the thermometer in London. The first query should be dynamic in that the needed currency should be looked up rather than hardcoded. That is, the currency should be obtained by looking up the currency the store location accepts, not hardcoded by manually eyeballing the tables yourself.
  
Code: Two Queries for Cashmere Sweater
--Obtain the Dollar to Euro ratio, which gives us 0.93. SELECT us_dollars_to_currency_ratio
FROM Currency
WHERE currency_name = 'Euro';
--Hardcode 0.93 in another query to get the price. SELECT price_in_us_dollars * 0.93 AS price_in_euros FROM Product
WHERE product_name = 'Cashmere Sweater';

3.writing a single query that contains an uncorrelated subquery. Explain:
   
Code: Single Query for Cashmere Sweater
1:select price_in_us_dollars*
2:(select us_dollars_to_currency_ration
3:From Currency
4:Where currency_name='Euro') AS price_in_euros
5: FROM Products
6: WHERE product_name = 'Cashmere Sweater'

4. 
Imagine a charity in London is hosting a fundraiser to purchase medical supplies for organizations that provide care to people in impoverished areas. The charity is targeting both people with average income as well a few wealthier people, and to this end asks for a selection of products both groups can contribute to purchase. Specifically, for the average income group, they would like to know what products cost less than 25 Euros, and for the wealthier group, they would like to know what products cost more than 300 Euros.
a. Develop a single query to provide them this result, which should contain uncorrelated subqueries and should list the names of the products as well as their prices in Euros.
 
Code: All Products’ Prices in Pesos
SELECT product_name, price_in_us_dollars *
(SELECT us_dollars_to_currency_ratio
FROM Currency
WHERE currency_name = 'Mexican Peso') AS price_in_pesos
FROM Product
 
Code: Products Less Than Mex$2,750
select product_name,
price_in_us_dollars *
(SELECT us_dollars_to_currency_ratio
 FROM   Currency
WHERE currency_name = 'Mexican Peso') AS price_in_pesos 
From Product
where price_in_us_dollars *
(SELECT us_dollars_to_currency_ratio
FROM Currency
WHERE currency_name = 'Mexican Peso') < 2750

5. Imagine that Denisha is a traveling doctor who works for an agency that sends her to various locations throughout the world with very little notice. As a result, she needs to know about medical supplies that are available in all store locations (not just some locations). This way, regardless of where she is sent, she knows she can purchase those products. She is also interested in viewing the alternate names for these products, so she is absolutely certain what each product is.
Note: It is important to Denisha that she can purchase the product in any location; only products sold in all stores should be listed, that is, if a product is sold in some stores, but not all stores, it should not be listed.
a. Develop a single query to list out these results, making sure to use uncorrelated subqueries where needed (one subquery will be put into the WHERE clause of the outer query).

 
Code: Store Locations Query
1: SELECT Store_location.store_location_id, Store_location.store_name
2: FROM Store_location
3: JOIN Offers ON Offers.store_location_id = Store_location.store_location_id
4: GROUP BY Store_location.store_location_id, Store_location.store_name
5: HAVING COUNT(Offers.purchase_delivery_offering_id) > 1

 
Code: Products and Prices Query
1.select Store_location.store_location_id, Store_location.store_name 
2.From Store_location
3.JOIN Offers ON Offers.store_location_id = Store_location.store_location_id 
4.Group by Store_location.store_location_id, Store_location.store_name 
5.Having COUNT(Offers.purchase_delivery_offering_id) > 1

 
Code: Full Query
1.SELECT Store_location.store_name,
2.Product.product_name,
3.Product.price_in_us_dollars
4.From Store_location
5.JOIN Sells ON Sells.store_location_id = Store_location.store_location_id
6.JOIN Product ON Product.product_id = Sells.product_id
7.Where Store_location.store_location_id IN
8.(SELECT Store_location.store_location_id
9.From Store_location
10.JOIN Offers
11.ON Offers.store_location_id = Store_location.store_location_id
12.GROUP BY Store_location.store_location_id
13.HAVING COUNT(Offers.purchase_delivery_offering_id) > 1)

6. For this problem you will write a single query to address the same use case as in step 5, but change your query so that the main uncorrelated subquery is in the FROM clause rather than in the WHERE clause. The results should be the same as in step 5, except of course possibly row ordering which can vary. Explain how you integrated the subquery into the FROM clause to derive the same results as step 5.
  
Code: Full Query with WHERE Clause Subquery
SELECT Store_location.store_name, Product.product_name,
Product.price_in_us_dollars
From Store_location
JOIN Sells ON Sells.store_location_id = Store_location.store_location_id 
JOIN Product ON Product.product_id = Sells.product_id 
WHERE Store_location.store_location_id IN
(SELECT Store_location.store_location_id
From Store_location
JOIN Offers
ON Offers.store_location_id = Store_location.store_location_id
GROUP BY Store_location.store_location_id
HAVING COUNT(Offers.purchase_delivery_offering_id) > 1)
 
Code: Subquery in FROM Clause
select locations.store_name,
Product.product_name, 
Product.price_in_us_dollars
From (SELECT Store_location.store_location_id,
Store_location.store_name 
FROM Store_location
JOIN Offers
ON Offers.store_location_id = Store_location.store_location_id
GROUP BY Store_location.store_location_id, Store_location.store_name
HAVING COUNT(Offers.purchase_delivery_offering_id) > 1) locations 
JOIN Sells ON Sells.store_location_id = locations.store_location_id 
JOIN Product ON Product.product_id = Sells.product_id

7. For this problem you will write a single query to address the same use case as in step 5, but change your query to use a correlated query combined with an EXISTS clause. The results should be the same as in step 5, except of course possibly row ordering which can vary. Explain:
a. how your solution makes use of the correlated subquery and EXISTS clause to help retrieve the result
b. how and when the correlated subquery is executed in the context of the outer query.
  
Code: Products and Prices Query
select Store_location.store_name,
Product.product_name, Product.price_in_us_dollars
From Store_location
JOIN Sells ON Sells.store_location_id = Store_location.store_location_id 
JOIN Product ON Product.product_id = Sells.product_id
 
Code: Locations Selling Cashmere Sweaters

select Store_location.store_location_id,
Store_location.store_name
From Store_location
JOIN Sells ON Sells.store_location_id = Store_location.store_location_id 
JOIN Product ON Product.product_id = Sells.product_id
AND Product.product_name = 'Cashmere Sweater'
 
Code: Initial Combination Attempt
SELECT Store_location.store_name,Product.product_name, Product.price_in_us_dollars
From Store_location
JOIN Sells ON Sells.store_location_id = Store_location.store_location_id
JOIN Product ON Product.product_id = Sells.product_id
WHERE EXISTS (SELECT Store_location.store_location_id, Store_location.store_name
FROM Store_location
JOIN Sells ON Sells.store_location_id=Store_location.store_location_id
JOIN Product ON Product.product_id = Sells.product_id AND Product.product_name = 'Cashmere Sweater')

Code: Correlated Subquery
SELECT Store_location.store_name,Product.product_name, Product.price_in_us_dollars
From Store_location
JOIN Sells ON Sells.store_location_id = Store_location.store_location_id
JOIN Product ON Product.product_id = Sells.product_id
WHERE EXISTS (SELECT Cashmere_location.store_location_id, Cashmere_location.store_name
FROM Store_location Cashmere_location
JOIN Sells ON Sells.store_location_id = Cashmere_location.store_location_id JOIN Product ON Product.product_id = Sells.product_id
AND Product.product_name = 'Cashmere Sweater'
WHERE Cashmere_location.store_location_id = Store_location.store_location_id)
